// Generated by CoffeeScript 1.7.1
(function() {
  var CompositeToken, LoopToken, MoveToken, RandomMoveToken, ResetToken, Segment, SetLengthToken, StateManager, Token, Vector, drawLine, fragShaderSource, getToken, get_shader, gl, initBuffer, initBuffers, initGL, initScene, initShaders, shaderProgram, stateManager, unbindBuffers, vtxShaderSource,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fragShaderSource = "precision highp float; uniform vec4 u_color; void main(void) { gl_FragColor = u_color; }";

  vtxShaderSource = "attribute vec3 a_position; uniform vec4 u_color; uniform mat4 u_mvMatrix; uniform mat4 u_pMatrix; void main(void) { gl_Position = u_pMatrix * u_mvMatrix * vec4(a_position, 1.0); }";

  gl = null;

  shaderProgram = null;

  get_shader = function(type, source) {
    var shader;
    shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    return shader;
  };

  initGL = function() {
    var canvas;
    canvas = $('canvas')[0];
    gl = canvas.getContext("experimental-webgl", {
      antialias: false
    });
    return gl.viewport(0, 0, canvas.width, canvas.height);
  };

  initShaders = function() {
    var fragmentShader, vertexShader;
    vertexShader = get_shader(gl.VERTEX_SHADER, vtxShaderSource);
    fragmentShader = get_shader(gl.FRAGMENT_SHADER, fragShaderSource);
    shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    gl.useProgram(shaderProgram);
    shaderProgram.aposAttrib = gl.getAttribLocation(shaderProgram, "a_position");
    gl.enableVertexAttribArray(shaderProgram.aposAttrib);
    shaderProgram.colorUniform = gl.getUniformLocation(shaderProgram, "u_color");
    shaderProgram.pMUniform = gl.getUniformLocation(shaderProgram, "u_pMatrix");
    return shaderProgram.mvMUniform = gl.getUniformLocation(shaderProgram, "u_mvMatrix");
  };

  initScene = function() {
    var mvMatrix, pMatrix;
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    mvMatrix = [1, 0, 0, 0, 0, 1, 0.00009999999747378752, 0, 0, -0.00009999999747378752, 1, 0, 0, 1.3552527156068805e-20, -8, 1];
    pMatrix = [2.4142136573791504, 0, 0, 0, 0, 2.4142136573791504, 0, 0, 0, 0, -1.0020020008087158, -1, 0, 0, -0.20020020008087158, 0];
    gl.enable(gl.DEPTH_TEST);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.uniformMatrix4fv(shaderProgram.pMUniform, false, new Float32Array(pMatrix));
    return gl.uniformMatrix4fv(shaderProgram.mvMUniform, false, new Float32Array(mvMatrix));
  };

  initBuffer = function(glELEMENT_ARRAY_BUFFER, data) {
    var buf;
    buf = gl.createBuffer();
    gl.bindBuffer(glELEMENT_ARRAY_BUFFER, buf);
    gl.bufferData(glELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);
    return buf;
  };

  initBuffers = function(vtx, idx) {
    var ibuf, vbuf;
    vbuf = initBuffer(gl.ARRAY_BUFFER, vtx);
    ibuf = initBuffer(gl.ELEMENT_ARRAY_BUFFER, idx);
    return gl.vertexAttribPointer(shaderProgram.aposAttrib, 3, gl.FLOAT, false, 0, 0);
  };

  unbindBuffers = function() {
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    return gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
  };

  drawLine = function(vec1, vec2) {
    var idx, vtx;
    vtx = new Float32Array([vec1.x, vec1.y, 0.0, vec2.x, vec2.y, 0.0]);
    idx = new Uint16Array([0, 1]);
    initBuffers(vtx, idx);
    gl.lineWidth(0.1);
    gl.uniform4f(shaderProgram.colorUniform, 1, 1, 1, 1);
    gl.drawElements(gl.LINES, 2, gl.UNSIGNED_SHORT, 0);
    gl.flush();
    return unbindBuffers();
  };

  Vector = (function() {
    Vector.add = function(vec1, vec2) {
      return new Vector(vec1.x + vec2.x, vec1.y + vec2.y);
    };

    Vector.origin = new Vector(0.0, 0.0);

    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.scale = function(scalar) {
      return new Vector(this.x * scalar, this.y * scalar);
    };

    Vector.prototype.length = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.unit = function() {
      return new Vector(this.x / this.length(), this.y / this.length());
    };

    Vector.prototype.setLength = function(length) {
      return this.unit().scale(length);
    };

    return Vector;

  })();

  StateManager = (function() {
    function StateManager() {
      this.reset();
    }

    StateManager.prototype.particleSpeed = null;

    StateManager.prototype.reset = function() {
      this.position = Vector.origin;
      return this.particleSpeed = 0.5;
    };

    return StateManager;

  })();

  stateManager = new StateManager();

  Token = (function() {
    function Token() {}

    Token.prototype["do"] = function() {
      return console.log("Unimplemented do!");
    };

    Token.prototype.applyArgs = function(args) {
      return this.args = args;
    };

    Token.prototype.applyBinding = function(bindingName, val) {
      if (this.args) {
        return this.args = _.map(this.args, function(x) {
          if (x === bindingName) {
            return val;
          } else {
            return x;
          }
        });
      }
    };

    Token.get = function(str, args) {
      return _.tap(this.tokenMap[str], function(token) {
        return token.applyArgs(args);
      });
    };

    return Token;

  })();

  LoopToken = (function() {
    function LoopToken(val, binding, childToken) {
      this.val = val;
      this.binding = binding;
      this.childToken = childToken;
    }

    LoopToken.prototype["do"] = function() {
      var index, _i, _ref, _results;
      _results = [];
      for (index = _i = 1, _ref = this.val; 1 <= _ref ? _i <= _ref : _i >= _ref; index = 1 <= _ref ? ++_i : --_i) {
        if (this.binding) {
          this.childToken.applyBinding(this.binding, index);
        }
        _results.push(this.childToken["do"]());
      }
      return _results;
    };

    return LoopToken;

  })();

  CompositeToken = (function() {
    function CompositeToken(childTokens) {
      this.childTokens = childTokens;
    }

    CompositeToken.prototype["do"] = function() {
      return _.forEach(this.childTokens, function(childToken) {
        return childToken["do"]();
      });
    };

    return CompositeToken;

  })();

  MoveToken = (function(_super) {
    __extends(MoveToken, _super);

    function MoveToken(x, y) {
      this.vector = new Vector(x, y);
    }

    MoveToken.prototype["do"] = function() {
      var newPosition, oldPosition;
      oldPosition = stateManager.position;
      newPosition = Vector.add(oldPosition, this.vector.setLength(stateManager.particleSpeed));
      drawLine(oldPosition, newPosition);
      return stateManager.position = newPosition;
    };

    return MoveToken;

  })(Token);

  RandomMoveToken = (function(_super) {
    __extends(RandomMoveToken, _super);

    function RandomMoveToken() {}

    RandomMoveToken.prototype["do"] = function() {
      this.vector = new Vector(Math.random() - 0.5, Math.random() - 0.5);
      return RandomMoveToken.__super__["do"].apply(this, arguments);
    };

    return RandomMoveToken;

  })(MoveToken);

  SetLengthToken = (function(_super) {
    __extends(SetLengthToken, _super);

    function SetLengthToken() {
      this.length = 0.5;
    }

    SetLengthToken.prototype["do"] = function() {
      return stateManager.particleSpeed = this.args[0];
    };

    return SetLengthToken;

  })(Token);

  ResetToken = (function(_super) {
    __extends(ResetToken, _super);

    function ResetToken() {
      return ResetToken.__super__.constructor.apply(this, arguments);
    }

    ResetToken.prototype["do"] = function() {
      return stateManager.reset();
    };

    return ResetToken;

  })(Token);

  Token.tokenMap = {
    n: new MoveToken(0.0, 1.0),
    e: new MoveToken(1.0, 0.0),
    s: new MoveToken(0.0, -1.0),
    w: new MoveToken(-1.0, 0.0),
    rand: new RandomMoveToken(),
    len: new SetLengthToken(),
    reset: new ResetToken()
  };

  Segment = (function() {
    function Segment(segmentString) {
      this.segmentString = segmentString.trim();
    }

    Segment.prototype.loop = function() {};

    Segment.prototype.tokenString = function() {
      return this.segmentString.split("(")[0];
    };

    Segment.prototype.args = function() {
      var argString;
      argString = this.segmentString.split("(")[1];
      if (argString) {
        return _.initial(argString).join('').split(',').map(function(x) {
          return Number(x.trim());
        });
      }
    };

    return Segment;

  })();

  getToken = function(segmentString) {
    var binding, loopVal, rest, segment, segmentParts, val;
    segmentParts = segmentString.split(":");
    if (segmentParts[1] != null) {
      loopVal = segmentParts[0].trim();
      rest = segmentParts.slice(1).join('');
      val = parseInt(loopVal.split("$")[0]);
      binding = loopVal.split("$")[1];
      return new LoopToken(val, binding, getToken(rest));
    } else {
      segment = new Segment(segmentString);
      return Token.get(segment.tokenString(), segment.args());
    }
  };

  $(document).ready(function() {
    initGL();
    initShaders();
    initScene();
    return $('#prompt').keypress(function(event) {
      var promptText, segmentStrings;
      if (event.keyCode === 13) {
        promptText = $('#prompt').val();
        segmentStrings = promptText.split(";");
        segmentStrings = _.map(segmentStrings, function(x) {
          return x.trim();
        });
        initScene();
        stateManager.reset();
        return _.forEach(segmentStrings, function(segmentString) {
          return getToken(segmentString)["do"]();
        });
      }
    });
  });

}).call(this);
